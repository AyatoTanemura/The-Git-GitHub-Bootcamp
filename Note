# What is Git?
The world's most popular version control system
Version control is software that tracks and manages changes to files over time.
Version control systems generally allow users to revisit earlier versions of the files, compare 
  changes between versions, undo changes, and a whole lot more.

# Git vs GitHub
## Git
Git is the version control software that runs locally on your machine. You don't need to register for an account.
You don't need the internet to use it. You can use Git without ever touching Github.

## GitHub
Github is a service that hosts Git repositories in the cloud and makes it easier to collaborate with other people.
You do need to sign up for an account to use Github. It's an online place to share work that is done using Git.


# setup
## Name
git config --global user.name "name"
## Email
git config --global user.email "email"
## Default Editor (VScode)
git config --global core.editor "code --wait"

# Terminal Command
## Navigation
ls
  print home directories (shows the files)
start .
  show folders
ls folderName/
  print folders inside the location
pwd
  print ot your current location
cd folderName
  change location to the folder
cd ..
  take us back one level
touch fileName
  create file
mkdir
  make folder
rm fileName
  remove the file
rm -rf folderName
  remove the folder
  '-rf' is a version of 'rm' that delete folders

# Repositpry
A Git "Repo" is a workspace which tracks and manages files within a folder.
Anytime we want to use Git with a project, app, etc we need to create a new git repository. 
We can have as many repos on our machine as needed, all with separate histories and contents.

# Git command
## Official website about command
https://git-scm.com/docs

## Basics
git status
    gives information on the current status of a git repository and its contents
git init
    Use git init to create a new git repository. 
    Before we can do anything git-related, wemust initialize a repo first!

## Adding
git add file1 file2
    stage all changes at once
git add .
    this stages all changes at once
## Committing
git commit -m "Type Messege"
    We use the git commit command to actually commit changes from the staging area.
git commit
    go VScode after commit and add comments
git commit -a -m "message"
    this does add and commit at the same time

##Log
git log
    shows the log of commit
git log --oneline
    only shows the first line of comments
# Commit in detail
##Git docs
https://git-scm.com/docs (same as above)

##Atomic Commits
try to keep each commit focused on a single thing.

## writing comment
either past tense or present, be in a pattern

# Amending Commits
git commit -m "some commit"
git add forgotten_file
git commit --amend
    Suppose you just made a commit and then realized you forgot to include a file! Or, maybe you made a
    typo in the commit message that you want to correct.

# Ignoring File
touch .gitignore
    Create a file called .gitignore in the root of a repository. Inside the file, we can write patterns to
    tell Git which files & folders to ignore

# Git Branching 
git branch
    viewing branches
git branch new-branch-name
    Creating branches
    Use git branch <branch-name> to make a new branch based upon the current HEAD
git switch branch-name
    Switching Branches
git switch -c new-branch-name
    Use git switch with the -c flag to create a new branch AND switch to it all in one go. 
git checkout branch-name
    The checkout command does a million additional things, so the decision was made to add a 
    standalone switch command which is much simpler.
  
# Deleting & Remaing branches
git branch -d branch-name
    deleting the branch you specify
    you have to be on the branch somewhere else but not the specigied one
git branch -m branch-name
    rename the branch you specify
    you have to be on the branch

# Git Merging
We merge branches, not specific commits
We always merge to the current HEAD branch

## Fast Forward merge
git merge branch-name
    1. Switch to or checkout the branch you want to merge the changes into (the receiving branch)
    2. Use the git merge command to merge changes from a specific branch into the current branch.
  
## Resplving Conflicts
  1. Open up the file(s) with merge conflicts
  2. Edit the file(s) to remove the conflicts. Decide which branch's content you want to keep in each conflict. 
     Or keep the content from both.
  3. Remove the conflict "markers" in the document
  4. Add your changes and then make a commit!

# Comparing Changes

git diff
    lists all the changes in our working directory that are NOT staged for the next commit.
git diff HEAD
    lists all changes in the working tree since your last commit.
git diff --staged
git diff --cached
    list the changes between the staging area and our last commit.
git diff HEAD file-name
git diff --staged file-name
    We can view the changes within a specific file by providing git diff with a filename.
git diff branch1..branch2
    list the changes between the tips of branch1 and branch2
git diff commit1..commit2
    To compare two commits, provide git diff with the commit hashes of the commits in question.
  
# Stashing
git stash
    useful command that helps you save changes that you are not yet ready to commit.
git stash pop
    remove the most recently stashed changes in your stash and re-apply them to your working copy.
git stash apply
    to apply whatever is stashed away, without removing it from the stash. 
    This can be useful if you want to apply stashed changes to multiple branches
git stash list
    run git stash list to view all stashes
git stash apply stash@{}
    git assumes you want to apply the most recent stash when you run git stash apply, but you can also specify
    a particular stash like git stash apply stash@{2}
git stash drop stash@{}
    To delete a particular stash, you can use git stash drop <stash-id>
git stash clear
    To clear out all stashes, run git stash clear

# Undoing Changes & Time Traveling
git checkout commit-hash
    You have a couple options:
    1. Stay in detached HEAD to examine the contents of the old commit. Poke around, view the files, etc.
    2. Leave and go back to wherever you were before - reattach the HEAD
    3. Create a new branch and switch to it. You can now make and save changes, since HEAD is no longer detached.
git checkout HEAD~#
    # IS NUMBER
    HEAD~1 refers to the commit before HEAD (parent)
    HEAD~2 refers to 2 commits before HEAD (grandparent)
    This is not essential, but I wanted to mention it because it's quite weird looking if you've never seen it.
gt checkout HEAD file-name
git checkout -- file-name file-name 
    to discard any changes in that file, reverting back to the HEAD.
git restore file-name
    To restore the file to the contents in the HEAD (same as "checkout HEAD")
git restore --source HEAD~# file-name
    restore the contents of home.html to its state from the commit prior to HEAD. You can also use a
    particular commit hash as the source.
git restore --staged file-name
    If you have accidentally added a file to your staging area with git add and you don't wish to
    include it in the next commit, you can use git restore to remove it from staging.
git reset commit-hash
    reset the repo back to a specific commit. The commits are gone. 
    but changes in files are not gone 
git reset --hard commit-hash
    If you want to undo both the commits AND the actual changes in your files, you can use the --hard option.
*commit-hash can be replaced with HEAD~# (refers #th commit before)













